generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  resetToken     String?
  resetTokenExpiry DateTime?
  emailVerified  Boolean   @default(false)
  verificationToken String?
  verificationTokenExpiry DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  meals          Meal[]
  goals          Goal[]
  profile        Profile?
  preferences    UserPreferences?
  mealPlans      MealPlan[]
  foodImages     FoodImage[]
}

model Profile {
  id              String   @id @default(cuid())
  age             Int?
  weight          Float?   // in kg
  height          Float?   // in cm
  gender          String?  // "MALE", "FEMALE", "OTHER"
  activityLevel   String?  // "SEDENTARY", "LIGHT", "MODERATE", "VERY_ACTIVE", "EXTRA_ACTIVE"
  dietaryType     String?  // "OMNIVORE", "VEGETARIAN", "VEGAN", "PESCATARIAN", "KETO", "PALEO"
  weightGoal      String?  // "LOSE", "MAINTAIN", "GAIN"
  allergies       String[] // Array of allergy strings
  healthConditions String[] // Array of health conditions
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserPreferences {
  id                String   @id @default(cuid())
  measurementSystem String   // "METRIC", "IMPERIAL"
  mealReminders     Boolean  @default(false)
  reminderTime      DateTime?
  weeklyReport      Boolean  @default(true)
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Meal {
  id          String      @id @default(cuid())
  name        String
  calories    Int
  protein     Float
  carbs       Float
  fat         Float
  notes       String?
  mealTime    DateTime    @default(now())
  mealType    MealType    @default(SNACK)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      FoodImage[]
  ingredients Ingredient[]
  recipe      Recipe?
  mealPlans   MealPlan[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([mealTime])
}

model Ingredient {
  id            String   @id @default(cuid())
  name          String
  calories      Int
  protein       Float?
  carbs         Float?
  fat           Float?
  fiber         Float?
  sugar         Float?
  sodium        Float?
  amount        Float    // Amount in base unit (g/ml)
  unit          String   // "g", "ml", "oz", "cup"
  isVerified    Boolean  @default(false)
  source        String?  // Source of nutritional information
  mealId        String
  meal          Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model FoodImage {
  id          String    @id @default(cuid())
  url         String
  fileName    String
  fileSize    Int
  fileType    String
  isProcessed Boolean   @default(false)
  mealId      String?
  meal        Meal?     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([mealId])
}

model Goal {
  id              String   @id @default(cuid())
  dailyCalories   Int
  dailyProtein    Float
  dailyCarbs      Float
  dailyFat        Float
  dailyFiber      Float?
  dailySugar      Float?
  dailySodium     Float?
  startDate       DateTime @default(now())
  endDate         DateTime?
  isActive        Boolean  @default(true)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  @@unique([userId, isActive])
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals       Meal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([userId])
  @@index([startDate, endDate])
}

model Recipe {
  id              String   @id @default(cuid())
  name            String
  instructions    String[]
  prepTime        Int?     // in minutes
  cookTime        Int?     // in minutes
  servings        Int?
  difficulty      String?  // "EASY", "MEDIUM", "HARD"
  cuisine         String?
  tags           String[]
  mealId         String   @unique
  meal           Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}